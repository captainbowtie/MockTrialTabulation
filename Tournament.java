/*
 * Copyright (C) 2016 captainbowtie
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package com.allenbarr.MockTrialTabulation;

import java.io.File;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;

/**
 *
 * @author captainbowtie
 */
public class Tournament {

    private final ArrayList<Team> teams;
    private final Random random = new Random();

    /**
     * Default constructor. Creates a Tournament and initializes the team list
     *
     */
    public Tournament() {
        teams = new ArrayList<>();
    }

    /**
     * Constructor for when a tournament is being restored from a save state.
     * The save state should be either one generated by this class or one
     * following the format of this class, otherwise the restore will not
     * succeed
     *
     * @param csvFile file object where the save state is stored.
     */
    public Tournament(File csvFile) {
        teams = new ArrayList<>();
        // @TODO write file importer
    }

    /**
     * Adds a new team with the specified number, name, and impermissible
     * matches to that list
     *
     * @param teamNumber team number of the team to be added
     * @param teamName team name of the team to be added
     * @param impermissibleMatches list of teams (by team number) the team to be
     * added cannot face
     */
    public void addTeam(int teamNumber, String teamName, List impermissibleMatches) {
        teams.add(new Team(teamNumber, teamName, impermissibleMatches));
    }

    /**
     * Writes the tournament, in CSV format, to the specified file location
     *
     * @param saveLocation the location in the file system to save the
     * tournament to
     */
    public void writeToCSV(File saveLocation) {
        // @TODO determine CSV format and then write an exporter
    }

    /**
     * Returns the List of teams competing at the tournament
     *
     * @return teams competing at the tournament in List form
     */
    public List<Team> getTeams() {
        return teams;
    }

    /**
     * Returns the Team at the specified index from the List of teams
     *
     * @param index
     * @return Team at the specified index from the Team List
     */
    public Team getTeam(int index) {
        return teams.get(index);
    }

    public void pairRound1() {
        RoundPairing[] rounds = new RoundPairing[teams.size() / 2];
        ArrayList<Team> teamArray = (ArrayList<Team>) teams.clone();
        for (int a = 0; a < rounds.length; a++) {
            rounds[a] = new RoundPairing();
            int plaintiffIndex = random.nextInt(teamArray.size());
            rounds[a].setPlaintiffTeam(teamArray.get(plaintiffIndex));
            teamArray.remove(plaintiffIndex);
            int defenseIndex = random.nextInt(teamArray.size());
            rounds[a].setDefenseTeam(teamArray.get(defenseIndex));
            teamArray.remove(defenseIndex);
        }
        rounds = resolveImpermissibleMatches(rounds, 1);
        savePairingsToTeams(rounds, 1);
    }

    private RoundPairing[] resolveImpermissibleMatches(RoundPairing[] rounds, int roundNumber) {
        if (roundNumber == 1) {
            final ArrayList<Integer[]> swapList = new ArrayList<>();
                for (int a = 0; a < rounds.length; a++) {
                    if(rounds[a].getPlaintiffTeam().getImpermissibleMatches().contains(rounds[a].getDefenseTeam().getTeamNumber())){
                        pairRound1();
                        a=-1;
                    }
                }
        }
        return rounds;
    }

    private void savePairingsToTeams(RoundPairing[] rounds, int roundNumber) {
        for (int a = 0; a < rounds.length; a++) {
            int plaintiffTeamNumber = rounds[a].getPlaintiffTeam().getTeamNumber();
            int defenseTeamNumber = rounds[a].getDefenseTeam().getTeamNumber();
            for (int b = 0; b < teams.size(); b++) {

                if (teams.get(b).getTeamNumber() == plaintiffTeamNumber && roundNumber == 1) {
                    teams.get(b).setRound1Plaintiff(true);
                    teams.get(b).setRound1Opponent(defenseTeamNumber);
                } else if (teams.get(b).getTeamNumber() == plaintiffTeamNumber && roundNumber == 2) {
                    teams.get(b).setRound2Opponent(defenseTeamNumber);
                } else if (teams.get(b).getTeamNumber() == plaintiffTeamNumber && roundNumber == 3) {
                    teams.get(b).setRound3Plaintiff(true);
                    teams.get(b).setRound3Opponent(defenseTeamNumber);
                } else if (teams.get(b).getTeamNumber() == plaintiffTeamNumber && roundNumber == 4) {
                    teams.get(b).setRound4Opponent(defenseTeamNumber);
                }

                if (teams.get(b).getTeamNumber() == defenseTeamNumber && roundNumber == 1) {
                    teams.get(b).setRound1Plaintiff(false);
                    teams.get(b).setRound1Opponent(plaintiffTeamNumber);
                } else if (teams.get(b).getTeamNumber() == defenseTeamNumber && roundNumber == 2) {
                    teams.get(b).setRound2Opponent(plaintiffTeamNumber);
                } else if (teams.get(b).getTeamNumber() == defenseTeamNumber && roundNumber == 3) {
                    teams.get(b).setRound3Plaintiff(false);
                    teams.get(b).setRound3Opponent(plaintiffTeamNumber);
                } else if (teams.get(b).getTeamNumber() == defenseTeamNumber && roundNumber == 4) {
                    teams.get(b).setRound4Opponent(plaintiffTeamNumber);
                }

            }
        }
    }

    /**
     * Returns the CS of the specified team
     *
     * @param teamNumber team whose CS is to be returned
     * @return CS of the team in question
     */
    public int getTeamCS(int teamNumber) {
        int cs = 0;
        //TODO write algorithm to get CS
        return cs;
    }

    private class RoundPairing {

        private Team plaintiffTeam;
        private Team defenseTeam;

        public void setPlaintiffTeam(Team plaintiffTeam) {
            this.plaintiffTeam = plaintiffTeam;
        }

        public void setDefenseTeam(Team defenseTeam) {
            this.defenseTeam = defenseTeam;
        }

        public Team getPlaintiffTeam() {
            return plaintiffTeam;
        }

        public Team getDefenseTeam() {
            return defenseTeam;
        }
    }

}
